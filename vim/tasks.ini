# vim: set noet fenc=utf-8 sts=4 sw=4 ts=4 ft=dosini:

[file-build]
command=echo unsupported filetype $(VIM_FILETYPE)
command:c,cpp/win32=gcc -O2 -Wall -fstrict-aliasing "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -Id:/dev/local/include -Ld:/dev/local/lib $(+CFLAGS:) $(+LDFLAGS:) -msse3 -lgdi32 -lws2_32 -liphlpapi -ld3d9 -ld3dx9 -lcmocka -lgtest -lgmock -lstdc++ -lm -lwinmm -lshlwapi
command:c,cpp/linux=gcc -O2 -Wall -fstrict-aliasing "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" $(+CFLAGS:) $(+LDFLAGS:) -lstdc++ -lm -msse3 -ldl -lpthread
command:go/win32=go build -o "$(VIM_PATHNOEXT).exe" "$(VIM_FILEPATH)"
command:go/linux=go build -o "$(VIM_PATHNOEXT)" "$(VIM_FILEPATH)"
command:make/win32=mingw32-make -f "$(VIM_FILEPATH)"
command:make/linux=make -f "$(VIM_FILEPATH)"
command:rust/win32=rustc "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT).exe"
command:rust/linux=rustc "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)"
command:pascal=fpc -vb -FE"$(VIM_FILEDIR)" "$(VIM_FILEPATH)"
output=quickfix
; cwd=$(VIM_FILEDIR)
# 结束时发送 QuickFixCmdPost make 触发 errormarker
auto=make
save=2

[file-run]
command="$(VIM_FILEPATH)"
command:c,cpp=$(+wrapper_cpp:) "$(VIM_PATHNOEXT)"
command:pascal="$(VIM_PATHNOEXT)"
command:go="$(VIM_PATHNOEXT)"
command:python=python "$(VIM_FILENAME)"
command:python/linux=python3 "$(VIM_FILENAME)"
command:make=make -f "$(VIM_FILENAME)" run
command:emake=emake -e "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:typescript=deno run "$(VIM_FILENAME)"
command:sh=sh "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:zsh=zsh "$(VIM_FILENAME)"
command:bash=bash "$(VIM_FILENAME)"
command:fish=fish "$(VIM_FILENAME)"
command:php=php "$(VIM_FILENAME)"
command:erlang=escript "$(VIM_FILENAME)"
command:ps1=powershell -file "$(VIM_FILENAME)"
command:scala=scala "$(VIM_FILENAME)"
command:haskell=ghci "$(VIM_FILENAME)"
command:applescript=osascript "$(VIM_FILENAME)"
command:vim=:source %|echo 'sourced ' . expand('%')
command:vb=cscript /nologo "$(VIM_FILENAME)"
command:rust="$(VIM_PATHNOEXT)"
command:bxrc=bochs -q -f "$(VIM_FILENAME)"
command:odin=odin run "$(VIM_FILENAME)"
output=terminal
cwd=$(VIM_FILEDIR)
save=2

[make]
command=make -f "$(VIM_FILEPATH)"
cwd=$(VIM_FILEDIR)

[make-run]
command=make -f "$(VIM_FILEPATH)" run
cwd=$(VIM_FILEDIR)
output=terminal

[make-test]
command=make -f "$(VIM_FILEPATH)" test
cwd=$(VIM_FILEDIR)
output=terminal

[emake]
command=emake --abs "$(VIM_FILEPATH)"
cwd=$(VIM_FILEDIR)
save=2

[emake-clean]
command=emake -clean "$(VIM_FILEPATH)"
cwd=$(VIM_FILEDIR)

[emake-exe]
command=emake -e "$(VIM_FILEPATH)"
cwd=$(VIM_FILEDIR)
output=terminal

[emake-auto]
command=emake --abs "$(VIM_FILENAME)"
command:make=make -f "$(VIM_FILENAME)"
cwd=$(VIM_FILEDIR)

[project-build]
command=make
cwd=$(VIM_ROOT)
save=2

[project-run]
command=make run
cwd=$(VIM_ROOT)
output=terminal

[project-test]
command=make test
cwd=$(VIM_ROOT)
output=terminal


# project-wide search, ask user input keyword
[grep-word]
command=rg -n --no-heading --color never "$(?keyword)" "<root>" -tc -tcpp -tpy -tvim -tgo -tasm -tlua -tjs
cwd=<root>
errorformat=%f:%l:%m

# project-wide search, search the word under cursor
[grep-cword]
command=rg -n --no-heading --color never "$(VIM_CWORD)" "<root>" -tc -tcpp -tpy -tvim -tgo -tasm -tlua -tjs
cwd=<root>
errorformat=%f:%l:%m

[vc-2015]
command/win32=d:\dev\vc2015\vcvarsall.cmd cl.exe -nologo -O2 -EHsc "$(VIM_FILEPATH)" 
cwd=$(VIM_FILEDIR)
errorformat=%f(%l):%m

[vc-2017]
command/win32=d:\dev\vc2017\vcvarsall.cmd cl.exe -nologo -O2 /arch:AVX "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT).exe"
cwd=$(VIM_FILEDIR)
errorformat=%f(%l):%m
save=2

[git-user-proxy-on]
command=git config --global http.proxy "socks5://127.0.0.1:1080" && git config --global https.proxy "socks5://127.0.0.1:1080"

[git-user-proxy-off]
command=git config --global --unset http.proxy && git config --global --unset https.proxy

[git-local-proxy-on]
command=git config --local http.proxy "socks5://127.0.0.1:1080" && git config --local https.proxy "socks5://127.0.0.1:1080"

[git-local-proxy-off]
command=git config --local --unset http.proxy && git config --local --unset https.proxy

[git-config-list]
command/win32=type .git\config
command=cat .git/config
cwd=<root>
errorformat=

[git-push]
command=git push 
cwd=<root>
errorformat=

[git-fetch]
command=git fetch
cwd=<root>
errorformat=

[git-pull]
command=git pull
cwd=<root>
errorformat=

[mingw-lib-init]
command/win32=mkdir build && cd build && cmake .. -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX=d:/dev/local/build
command=mkdir build && cd build && cmake .. -G "MinGW Makefiles"
cwd=<root>
errorformat=

[mingw-lib-build]
command=cmake --build build
cwd=<root>
errorformat=%f:%l:%m

[mingw-lib-install]
command=cmake --install build
cwd=<root>
errorformat=

[langtool]
command="$(VIM_FILEPATH)"
cwd="$(VIM_FILEDIR)"
program=make
compiler=langtool
once=1
strip=1
scroll=0
encoding=utf-8


